;       At the top of Assembly programs you will usually see the following code, or something that looks like it.
;- -------------------------------------------------------------------------------

*=$0801         

        BYTE    $0E, $08, $0A, $00, $9E, $20, $28,  $32, $33, $30, $34, $29, $00, $00, $00

*=$0900         

; ---------------------------------------------------------------------------------
                ; The purpose of this snippet is to typein the command:  10 SYS (2304).
                ; Since Commodore 64 uses basic as it's interface, what's happening here
                ; is that you're instructing the machine to start running commands stored
                ; in it's memory beginning at address $0900.
                ;
                ; There will be more about addresses in the next tutorial.  Right now we just want to 
                ; break out what's happening in this 3 lines of code.
                
                ; *=$0801         

                ; The address 0801 is the beginning of where basic begins opperating code.
                ; You can not start this code at any other address.  Not $0800 or $0802.  To
                ; enter this command in basic, you must start at $0801.
                ;
                ;  What the line of BYTE data is doing, is keying in the basic command:
                ;
                ;  10 SYS (2304)
                ;
                ; $0e
                ; $08 <- These two bytes represent the length of the command that follows by 
                ;        telling it where the last byte in the command is stored.
                ;
                ;        I'm not able to be sure if they need to 'accurately' represent the size of the 
                ;        basic command as changing the numbers to anything but $00 doesn't seem to 
                ;        break the program in my tests.  I'll edit this if I find different.
                ;
                ; $OA = 10  <- In basic each line needs a number to work.
                ;
                ; $9E = SYS <- In this case it's the whole command, not seperate numbers/letters
                ; 
                ; $20 = space
                ; $28 = (
                ; $32 = 2
                ; $33 = 3
                ; $30 = 0
                ; $34 = 4
                ; $29 = )
                ; $00 = New Line
                ; $00 = End Code
                ; $00 = Extra
                ;
                ; Following the BYTE data, is the line:
                ;
                ; *=0900
                ; 
                ; This is the nubmer 2304 represents in hex, and is where your code will start from
                ; when you begin typing it into the assembler.
